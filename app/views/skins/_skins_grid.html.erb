<div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-5 gap-12 lg:gap-20 mx-6 md:mx-6 lg:mx-6 2xl:mx-20 mt-6 mb-12">
  <% rarity_videos = {
      'Common' => { intro: 'Common-Intro.webm', outro: 'Common-Outro.webm', smoke: 'Common-Smoke.webm' },
      'Rare' => { intro: 'Rare-Intro.webm', outro: 'Rare-Outro.webm', smoke: 'Rare-Smoke.webm' },
      'Epic' => { intro: 'Epic-Intro.webm', outro: 'Epic-Outro.webm', smoke: 'Epic-Smoke.webm' },
      'Legendary' => { intro: 'Legendary-Intro.webm', outro: 'Legendary-Outro.webm', smoke: 'Legendary-Smoke.webm' },
      'Mythic' => { intro: 'Mythic-Intro.webm', outro: 'Mythic-Outro.webm', smoke: 'Mythic-Smoke.webm' },
      'Transcendent' => { intro: 'Trascendent-Intro.webm', outro: 'Trascendent-Outro.webm', smoke: 'Trascendent-Smoke.webm' },
      'Ultimate' => { intro: 'Trascendent-Intro.webm', outro: 'Trascendent-Outro.webm', smoke: 'Trascendent-Smoke.webm' }

  } %>

  <% skins.each_with_index do |skin, index| %>
    <div class="relative w-full <%= 
      if skins.length % 2 == 1 && skins.length <= 6 && index == skins.length - 1
        'md:col-start-2 xl:col-auto'
      end
    %> "> 

      <% rarity = skin.rarity %> <!-- Assuming skin has a `rarity` attribute -->
      <% videos = rarity_videos[rarity] %> <!-- Get the corresponding videos for the rarity -->

      <!-- Video overlay for this specific card -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;">
        <video class="w-full h-full object-cover scale-x-[3] scale-[2] opacity-50" muted autoplay loop>
          <source src="<%= asset_path(videos[:smoke]) %>" type="video/webm">
        </video>
      </div>

      <!-- Outro video -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;" data-reveal-video>
        <video class="w-full h-full object-cover rounded-lg scale-x-[2.45] scale-[2.01] saturate-100 opacity-0 transition-all duration-300 ease-in-out" muted>
          <source src="<%= asset_path(videos[:outro]) %>" type="video/webm">
        </video>
      </div>

      <!-- Intro video -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;" data-reveal-video>
        <video class="w-full h-full object-cover rounded-lg scale-x-[2.45] scale-[2.01] saturate-50 opacity-0 transition-all duration-300 ease-in-out" muted>
          <source src="<%= asset_path(videos[:intro]) %>" type="video/webm">
        </video>
      </div>

      <div class="relative group bg-gradient-to-r from-[#0A1428]/20 to-[#0A0C14]/20 shadow-lg rounded-xl opacity-0 cursor-pointer transition-all duration-300 ease-in-out flex justify-center items-center h-full fade-in-up"
           style="animation-delay: <%= 0.3 * index %>s; ">
        <!-- Card content -->
        <div class="relative w-full h-full transition-all rounded-xl opacity-0 duration-300 ease-in-out overflow-hidden">
          <!-- Splash art -->
          <%= image_tag skin.loading_art, 
              data: { skin_splash: skin.splash_art, skin_name: skin.name, skin_description: skin.description, skin_rarity: skin.rarity },
              alt: "#{skin.name} loading art",  
              loading: "lazy",
              class: "w-full h-full object-cover rounded-xl shadow-md transition-all duration-300 group-hover:brightness-[1.2] group-hover:saturate-[1.10] ease-in-out" %>

          <!-- Skin name with fade-in -->
          <div class="absolute bottom-0 left-0 w-full">
            <div class="absolute inset-0 bg-gradient-to-t from-slate-950 via-slate-900/10 to-transparent opacity-0 rounded-lg"></div>
            <div class="relative z-10 px-6 py-4">
              <div class="text-xs md:text-sm 2xl:text-base min-[1700px]:text-2xl font-bold  <%= "glow-#{skin.rarity.downcase}"%> text-white text-center transition-opacity duration-300 ease-in-out" 
                   style="cursor: pointer;">
                <%= skin.name %>
              </div>
            </div>
            </div>
          </div>
      </div>
    </div>
  <% end %>
</div>

<!-- Modal to Show Full Splash Art -->
<div id="splash-art-modal" class="fixed inset-0 bg-black hidden bg-opacity-80 items-center justify-center z-50 flex">
  <div id="splash-art-modal-bg" class="mx-4 bg-slate-950 p-3 rounded-xl opacity-0 max-w-6xl scale-up w-full relative">
    <div class="relative group flex justify-center">
      <img id="splash-art-image" src="/api/placeholder/800/400" alt="Splash Art" 
           class="max-w-full max-h-full object-contain rounded-xl shadow-[0_4px_15px_rgba(0,0,0,0.75)]">
      <div class="absolute inset-0 flex flex-col justify-end items-start bg-gradient-to-t from-slate-950 via-slate-900/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-700 ease-in-out rounded-lg">
        <div class="w-full relative">
          <div id="modal-skin-name" 
               class="bottom-0 left-0 px-6 py-0 translate-y-6 group-hover:translate-y-0
                      text-base md:text-2xl font-bold text-[#C8AA6E] text-center
                      transform transition-all duration-500 md:opacity-100 group-hover:opacity-100
                      group-hover:relative
                      group-hover:text-[#C8AA6E]" style="cursor: default; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);">
            Skin Name
          </div>
          <div id="modal-skin-description"
               class="px-6 pb-0 group-hover:pb-4 pt-2 text-xs md:text-lg text-white
                      opacity-0 group-hover:opacity-100 text-center
                      transition-all duration-300 ease-in-out">
            This is a longer description that might span multiple lines. We want to make sure our title adapts properly to however long this description might be. It could be quite extensive in some cases.
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
    
// Select each card's clickable area
document.querySelectorAll('.relative.group.bg-gradient-to-r').forEach((card) => {
  let hasBeenClicked = false; // Flag to track if the card has been clicked
  let isPlaying = false; // Flag to track if a video is currently playing

  const videoContainers = card.parentElement.querySelectorAll('[data-reveal-video]');
  
  if (videoContainers.length < 2) {
    console.warn('Could not find both video containers');
    return;
  }

  const outroContainer = videoContainers[0];
  const introContainer = videoContainers[1];
  
  const outroVideo = outroContainer.querySelector('video');
  const introVideo = introContainer.querySelector('video');

  introVideo.load();
  outroVideo.load();

  if (!introVideo || !outroVideo) {
    console.warn('Could not find videos');
    return;
  }

  // Set up initial state
  introVideo.style.opacity = '1';
  introVideo.currentTime = 0; // Show first frame
  outroContainer.style.opacity = '0';
  outroVideo.style.opacity = '0';

  // Function to safely play a video with error handling
  const safePlayVideo = async (video) => {
    try {
      if (video.readyState >= 2) { // Have enough data to play
        await video.play();
      } else {
        // Wait for video to load enough data
        await new Promise((resolve) => {
          video.addEventListener('canplay', resolve, { once: true });
        });
        await video.play();
      }
    } catch (error) {
      console.error('Error playing video:', error);
    }
  };

  // Function to handle the video sequence
  const playVideoSequence = async () => {
    if (hasBeenClicked || isPlaying) return; // Exit if already clicked or if a video is playing
    hasBeenClicked = true; // Set the flag to true
    isPlaying = true; // Set the flag to indicate that a video is playing

    await safePlayVideo(introVideo);
    
    // When intro ends, play outro
    introVideo.addEventListener('ended', async () => {
      introContainer.style.opacity = '0';
      introVideo.style.opacity = '0';
      outroContainer.style.opacity = '1';
      outroVideo.style.opacity = '1';
      await safePlayVideo(outroVideo);      

      const skinArtContainer = card.querySelector('.relative.group.bg-gradient-to-r .relative.w-full');
      skinArtContainer.style.opacity = '1'; // Make the skin loading art visible

      // When outro ends, hide both videos and show the skin loading art and name
      outroVideo.addEventListener('ended', () => {
        introContainer.style.opacity = '0';
        introVideo.style.opacity = '0';
        isPlaying = false; // Reset the flag to allow future clicks
      }, { once: true });
    }, { once: true });
  };

  // Add click handler to the card
  card.addEventListener('click', playVideoSequence);

  // Handle skin art click for opening the modal
  const skinArtContainer = card.querySelector('.relative.group.bg-gradient-to-r .relative.w-full');
  skinArtContainer.addEventListener('click', function (e) {
    if (!hasBeenClicked) return; // Prevent opening modal if video hasn't been played

    // Proceed to open the modal
    const splashArt = this.querySelector('img').getAttribute('data-skin-splash');
    const skinName = this.querySelector('img').getAttribute('data-skin-name');
    const skinDescription = this.querySelector('img').getAttribute('data-skin-description');
    const rarity = this.querySelector('img').getAttribute('data-skin-rarity');
    const modal = document.getElementById('splash-art-modal');
    const splashImage = document.getElementById('splash-art-image');
    const modalSkinName = document.getElementById('modal-skin-name');
    const modalSkinDescription = document.getElementById('modal-skin-description');
    const modalBg = document.getElementById('splash-art-modal-bg');

    const championBySkinPath = (skinName) => `/champions/skin/${encodeURIComponent(skinName)}`;

    modalBg.classList.remove(
      'bg-mythic', 'bg-ultimate', 'bg-legendary', 'bg-transcendent', 'bg-common', 'bg-epic',
      'border-mythic', 'border-ultimate', 'border-legendary', 'border-transcendent', 'border-common', 'border-epic'
    );

    if (rarity) {
      modalBg.classList.add(`bg-${rarity.toLowerCase()}`);
      modalBg.classList.add(`border-${rarity.toLowerCase()}`);
    }

    splashImage.src = splashArt;
    modalSkinName.innerHTML = `<a href="${championBySkinPath(skinName)}" class="text-[#C8AA6E] hover:brightness-125 hover:saturate-[1.25] transition-all duration-200 ease-in-out" target="_self">${skinName}</a>`;
    modalSkinDescription.innerHTML = skinDescription || 'No description available.';
    modal.classList.remove('hidden');
  });
});

// Hide modal when clicking outside
document.getElementById('splash-art-modal').addEventListener('click', function (e) {
  if (e.target === this) {
    this.classList.add('hidden');
  }
});

</script>

<style>
    .relative.group.bg-slate-950 .relative.w-full {
  opacity: 0; /* Hide initially */
  transition: opacity 0.3s ease-in; /* Smooth transition */
}
</style>