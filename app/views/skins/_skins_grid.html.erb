<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-5 gap-12 lg:gap-14 2xl:gap-20 mx-6 lg:mx-2 2xl:mx-24 mt-6 mb-12">
  <% rarity_videos = {
      'Common' => { intro: 'Common-Intro.webm', outro: 'Common-Outro.webm', smoke: 'Common-Smoke.webm' },
      'Rare' => { intro: 'Rare-Intro.webm', outro: 'Rare-Outro.webm', smoke: 'Rare-Smoke.webm' },
      'Epic' => { intro: 'Epic-Intro.webm', outro: 'Epic-Outro.webm', smoke: 'Epic-Smoke.webm' },
      'Legendary' => { intro: 'Legendary-Intro.webm', outro: 'Legendary-Outro.webm', smoke: 'Legendary-Smoke.webm' },
      'Mythic' => { intro: 'Mythic-Intro.webm', outro: 'Mythic-Outro.webm', smoke: 'Mythic-Smoke.webm' },
      'Transcendent' => { intro: 'Trascendent-Intro.webm', outro: 'Trascendent-Outro.webm', smoke: 'Trascendent-Smoke.webm' },
      'Ultimate' => { intro: 'Ultimate-Intro.webm', outro: 'Ultimate-Outro.webm', smoke: 'Ultimate-Smoke.webm' }

  } %>

  <% skins.each_with_index do |skin, index| %>
    <div class="relative w-full <%= 
      if skins.length % 2 == 1 && skins.length <= 6 && index == skins.length - 1
        'md:col-start-2 xl:col-auto'
      end
    %> "> 

      <% rarity = skin.rarity %> <!-- Assuming skin has a `rarity` attribute -->
      <% videos = rarity_videos[rarity] %> <!-- Get the corresponding videos for the rarity -->

      <!-- Video overlay for this specific card -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;" data-reveal-video>
        <video class="w-full h-full object-cover scale-x-[3] scale-[2] opacity-70" muted autoplay loop>
          <source src="<%= asset_path(videos[:smoke]) %>" type="video/webm">
        </video>
      </div>

      <!-- Outro video -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;" data-reveal-video>
        <video class="w-full h-full object-cover rounded-lg scale-x-[2.4] scale-[2.01] saturate-[1.18] opacity-0" muted>
          <source src="<%= asset_path(videos[:outro]) %>" type="video/webm">
        </video>
      </div>

      <!-- Intro video -->
      <div class="absolute inset-0 pointer-events-none z-50 transition-all opacity-0 duration-300 fade-in-up ease-in-out"
           style="animation-delay: <%= 0.3 * index %>s;" data-reveal-video>
        <video class="w-full h-full object-cover rounded-lg scale-x-[2.4] scale-[2.01] saturate-50 opacity-0" muted>
          <source src="<%= asset_path(videos[:intro]) %>" type="video/webm">
        </video>
      </div>

<div class="relative group bg-gradient-to-r from-[#0A1428]/20 to-[#0A1428]/20 rounded-xl cursor-pointer overflow-hidden transition-all duration-300 ease-in-out flex justify-center items-center h-full fade-in-up"
     style="animation-delay: <%= 0.3 * index %>s; ">
  <!-- Overlay based on rarity -->

  <!-- Card content -->
  <div id="card-collect" style="animation-delay: <%= 0.3 * index %>s;"
       class="relative <%= "#{skin.rarity.downcase}" %> w-full h-full rounded-xl opacity-0 duration-300 ease-in-out animate-pulse-low overflow-hidden transition-all" style="animation-delay: <%= 0.3 * index %>s; ">
    <!-- Splash art -->
    <%= image_tag skin.loading_art, 
        data: { skin_splash: skin.splash_art, skin_name: skin.name, skin_description: skin.description, skin_rarity: skin.rarity },
        alt: "#{skin.name} loading art",  
        loading: "lazy",
        class: "w-full h-full object-cover shadow-md scale-[1.07] inner-glow transition-all duration-300 group-hover:brightness-[1.1] group-hover:saturate-[1.10] ease-in-out" %>

    <!-- Skin name with fade-in -->
    <div class="absolute bottom-0 opacity-100 sm:opacity-0 group-hover:opacity-100 left-0 w-full transition-opacity duration-300 ease-in-out">
      <div class="absolute inset-0 bg-gradient-to-t from-slate-950 via-slate-900/10 to-transparent opacity-0 rounded-lg"></div>
      <div class="relative z-10 px-6 py-4 overflow-hidden">
        <div class="text-[0.5rem] sm:text-xs 2xl:text-base min-[1700px]:text-lg font-bold <%= "glow-#{skin.rarity.downcase}"%> text-white text-center transition-opacity duration-300 ease-in-out" 
             style="cursor: pointer; user-select: none;">
          <%= skin.name %>
        </div>
      </div>
    </div>
  </div>
    <div id="card-overlay" class="absolute inset-0 bg-<%= rarity.downcase %>-overlay opacity-0 pointer-events-none z-60"></div>

</div>
    </div>
  <% end %>
</div>

<!-- Modal to Show Full Splash Art -->
<div id="splash-art-modal" class="fixed inset-0 bg-black hidden bg-opacity-80 items-center justify-center z-50 flex">
  <div id="splash-art-modal-bg" class="mx-4 bg-slate-950 p-3 rounded-xl opacity-0 max-w-6xl scale-up w-full relative">
    <div class="relative group flex justify-center">
      <img id="splash-art-image" src="/api/placeholder/800/400" alt="Splash Art" 
           class="max-w-full max-h-full object-contain rounded-xl shadow-[0_4px_15px_rgba(0,0,0,0.75)]">
      <div class="absolute inset-0 flex flex-col justify-end items-start bg-gradient-to-t from-slate-950 via-slate-900/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-700 ease-in-out rounded-lg">
        <div class="w-full relative">
          <div id="modal-skin-name" 
               class="bottom-0 left-0 px-6 py-0 translate-y-6 group-hover:translate-y-0
                      text-base md:text-2xl font-bold text-[#C8AA6E] text-center
                      transform transition-all duration-500 md:opacity-100 group-hover:opacity-100
                      group-hover:relative
                      group-hover:text-[#C8AA6E]" style="cursor: default; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);">
            Skin Name
          </div>
          <div id="modal-skin-description"
               class="px-6 pb-0 group-hover:pb-4 pt-2 text-xs md:text-lg text-white
                      opacity-0 group-hover:opacity-100 text-center
                      transition-all duration-300 ease-in-out">
            This is a longer description that might span multiple lines. We want to make sure our title adapts properly to however long this description might be. It could be quite extensive in some cases.
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
    
// Select each card's clickable area
// Select each card's clickable area
document.querySelectorAll('.relative.group.bg-gradient-to-r').forEach((card, index) => {
  let hasBeenClicked = false;
  let isPlaying = false;

  const videoContainers = card.parentElement.querySelectorAll('[data-reveal-video]');
  
  if (videoContainers.length < 3) {
    console.warn('Could not find both video containers');
    return;
  }

  const shadowContainer = videoContainers[0];
  const outroContainer = videoContainers[1];
  const introContainer = videoContainers[2];

  const shadowVideo = shadowContainer.querySelector('video');
  const outroVideo = outroContainer.querySelector('video');
  const introVideo = introContainer.querySelector('video');
  const cardCollect = card.querySelector('#card-collect');
  const cardOverlay = card.querySelector('#card-overlay');
  
  // Get the skin name from the card for matching with pull results
  const skinName = card.querySelector('img').getAttribute('data-skin-name');
  
  introVideo.load();
  outroVideo.load();
  shadowVideo.load();
  shadowVideo.style.opacity = '0';
  cardCollect.classList.remove('animate-pulse-low');

  if (!introVideo || !outroVideo) {
    console.warn('Could not find videos');
    return;
  }

  // Set up initial state
  introVideo.style.opacity = '1';
  introVideo.currentTime = 0;
  outroContainer.style.opacity = '0';
  outroVideo.style.opacity = '0';
  shadowVideo.style.opacity = '1';
  cardCollect.classList.add('animate-pulse-low');

  const safePlayVideo = async (video) => {
    try {
      if (video.readyState >= 2) {
        await video.play();
      } else {
        await new Promise((resolve) => {
          video.addEventListener('canplay', resolve, { once: true });
        });
        await video.play();
      }
    } catch (error) {
      console.error('Error playing video:', error);
    }
  };

    const unblurMatchingPullResult = () => {
    setTimeout(() => {
      const pullCards = document.querySelectorAll('#pulls');
      pullCards.forEach(pullCard => {
        const pullSkinName = pullCard.querySelector('h5').textContent;
        if (pullSkinName === skinName) {
          // Add a transition class for smoother unblur effect
          pullCard.classList.remove('blur-[6px]');
        }
      });
    }, 3000); // 1 second delay
  };

  const playVideoSequence = async () => {
    if (hasBeenClicked || isPlaying) return;
    hasBeenClicked = true;
    isPlaying = true;

    // Unblur the corresponding pull result as soon as the animation starts
    unblurMatchingPullResult();

    await safePlayVideo(introVideo);
    
    introVideo.addEventListener('ended', async () => {
      introContainer.style.opacity = '0';
      introVideo.style.opacity = '0';
      outroContainer.style.opacity = '1';
      outroVideo.style.opacity = '1';
      shadowContainer.style.opacity = '0';
      shadowVideo.style.opacity = '0';
      cardCollect.classList.remove('animate-pulse-low');
      cardCollect.classList.add('shimmer');
      await safePlayVideo(outroVideo);      
      cardOverlay.classList.add('opacity-[0.3]');

      const skinArtContainer = card.querySelector('.relative.group.bg-gradient-to-r .relative.w-full');
      skinArtContainer.style.opacity = '1';

      outroVideo.addEventListener('ended', () => {
        introContainer.style.opacity = '0';
        introVideo.style.opacity = '0';
        isPlaying = false;
      }, { once: true });
    }, { once: true });
  };

  // Add click handler to the card
  card.addEventListener('click', playVideoSequence);
    
  // Handle skin art click for modal
  const skinArtContainer = card.querySelector('.relative.group.bg-gradient-to-r .relative.w-full');
  skinArtContainer.addEventListener('click', function (e) {
    if (!hasBeenClicked) return;

    const splashArt = this.querySelector('img').getAttribute('data-skin-splash');
    const skinName = this.querySelector('img').getAttribute('data-skin-name');
    const skinDescription = this.querySelector('img').getAttribute('data-skin-description');
    const rarity = this.querySelector('img').getAttribute('data-skin-rarity');
    const modal = document.getElementById('splash-art-modal');
    const splashImage = document.getElementById('splash-art-image');
    const modalSkinName = document.getElementById('modal-skin-name');
    const modalSkinDescription = document.getElementById('modal-skin-description');
    const modalBg = document.getElementById('splash-art-modal-bg');

    const championBySkinPath = (skinName) => `/champions/skin/${encodeURIComponent(skinName)}`;

    modalBg.classList.remove(
      'bg-mythic', 'bg-ultimate', 'bg-legendary', 'bg-transcendent', 'bg-common', 'bg-epic',
      'border-mythic', 'border-ultimate', 'border-legendary', 'border-transcendent', 'border-common', 'border-epic'
    );

    if (rarity) {
      modalBg.classList.add(`bg-${rarity.toLowerCase()}`);
      modalBg.classList.add(`border-${rarity.toLowerCase()}`);
    }

    splashImage.src = splashArt;
    modalSkinName.innerHTML = `<a href="${championBySkinPath(skinName)}" class="text-[#C8AA6E] hover:brightness-125 hover:saturate-[1.25] transition-all duration-200 ease-in-out" target="_self">${skinName}</a>`;
    modalSkinDescription.innerHTML = skinDescription || 'No description available.';
    modal.classList.remove('hidden');
  });
});

// Hide modal when clicking outside
document.getElementById('splash-art-modal').addEventListener('click', function (e) {
  if (e.target === this) {
    this.classList.add('hidden');
  }
});

// Remove the separate click handlers for pull cards since they're now handled automatically
document.querySelectorAll('#pulls').forEach((pullCard) => {
  pullCard.removeEventListener('click', () => {});
});

</script>

<style>
    .relative.group.bg-slate-950 .relative.w-full {
  opacity: 0; /* Hide initially */
  transition: opacity ease-in; /* Smooth transition */
}


  .bg-common-overlay {
    background-color: rgba(128, 128, 128, 0.3);
  }
  .bg-rare-overlay {
    background-color: rgba(200, 170, 110, 0.3);
  }
  .bg-epic-overlay {
    background-color: rgba(0, 200, 255, 0.3);
  }
  .bg-legendary-overlay {
    background-color: rgba(255, 50, 50, 0.3);
  }
  .bg-mythic-overlay {
    background-color: rgba(122, 62, 237, 0.3);
  }
  .bg-ultimate-overlay {
    background-color: rgba(255, 165, 0, 0.3);
  }
  .bg-transcendent-overlay {
    background-color: rgba(162, 162, 208, 0.3);
  }


</style>